// combCore.vp
//; my $bW = parameter( name=>"bitWidth", val=>32, doc=>"Width of input");
//; my $rA = parameter( name=>"rfAddressWidth", val=>5, max=>7 , doc=>"Bits for RF address" );
module `mname` (
input logic clk,
input logic rst,
input logic [`$bW-1`:0] instr,
input logic [`$bW-1`:0] pc,
input logic [`$bW-1`:0] src0,
input logic [`$bW-1`:0] src1,
input logic [`$bW-1`:0] memRdData,
output logic [`$bW-1`:0] memRdAddr,
output logic memRdEn,
output logic [`$bW-1`:0] memWrData ,
output logic [`$bW-1`:0] memWrAddr,
output logic memWrEn ,
output logic regWrEn,
output logic [`$rA-1`:0] regWrAddr,
output logic [`$rA-1`:0] srcAddr0 ,
output logic srcRdEn0 ,
output logic [`$rA-1`:0] srcAddr1 ,
output logic srcRdEn1 ,
output logic [`$bW-1`:0] dst0,
output logic [`$bW-1`:0] pcNxt
);

logic [5:0] op_s2; //opcode 
logic [4:0] rs_s2; //register s r-type
logic [4:0] rt_s2; // register t r-type
logic [4:0] rd_s2; // register d r-type
logic [4:0] shmt_s2; //shift amount r-type
logic [4:0] shmt_s3; //shift amount r-type
logic [5:0] fn_s2; //function - r-type
logic [5:0] mfn_s2; //function created for I-type
logic [5:0] muxfunc_s2; //muxed function
logic [5:0] muxfunc_s3; //muxed function
logic [`$bW-1`:0] simm_s2; //sign ext immediate for i-type
logic [25:0] offs_s2; //offset for j-type

logic [`$bW-1`:0] pcplus4_s1;
logic [`$bW-1`:0] pcplus4_s2;
logic [`$bW-1`:0] pcplusimm_s2;
logic [`$bW-1`:0] pcplusimm_s3;
logic [`$bW-1`:0] jmpaddr_s2;
logic [`$bW-1`:0] jmpaddr_s3;
logic [`$bW-1`:0] alu_o_s3, alu_a_s2, alu_b_s2, alu_a_s3, alu_b_s3;

logic [3:0] aluctl_s3;  
logic [1:0] aluop_s2;  
logic [1:0] aluop_s3;  
logic bne_s2, bgtz_s2, beq_s2, bne_s3, bgtz_s3, beq_s3, zero_s3, gtz_s3, branch_s3, jmp_s2, jmpreg_s2, jmp_s3, jmpreg_s3, alusrc_s2, aluimm_s2, memtoreg_s2, memtoreg_s3, memtoreg_s4, memtoreg_s5, regdst_s2; 

assign op_s2 = instr_s2[31:26];
assign rs_s2 = instr_s2[25:21];
assign rt_s2 = instr_s2[20:16];
assign rd_s2 = instr_s2[15:11];
assign shmt_s2 = instr_s2[10:6];
assign fn_s2 = instr_s2[5:0];
assign simm_s2 = {{16{instr_s2[15]}}, instr_s2[15:0]};
assign offs_s2 = instr_s2[25:0];

assign srcAddr0 = rs_s2;
assign srcAddr1 = rt_s2;

assign pcplus4_s1 = pc + `$bW`'d4;
assign pcplusimm_s2 = pcplus4_s2 + {simm_s2[`$bW-3`:0], 2'b0};
assign jmpaddr_s2 = {pcplus4_s2[31:28], offs_s2[25:0], 2'b0};

assign branch_s3 = (bgtz_s3 && gtz_s3) || (bne_s3 && ~zero_s3) || (beq_s3 && zero_s3);

always_comb begin
	unique case({jmp_s3, jmpreg_s3, branch_s3})
		3'b001:	   pcNxt_s3 = pcplusimm_s3;
		3'b010:    pcNxt_s3 = src0_s3;
		3'b100:    pcNxt_s3 = jmpaddr_s3; 
		default:   pcNxt_s3 = pcplus4_s3;
	endcase
end

assign alu_b = alusrc ? simm : src1;
assign alu_a = src0;
assign muxfunc = aluimm ? mfn : fn;

assign memWrAddr = alu_o;
assign memRdAddr = alu_o;
assign memWrData = src1;

assign dst0 = memtoreg ? memRdData : alu_o;
assign regWrAddr = regdst ? rd : rt;

assign instr_s1 = instr;
// Pipelines

//; my $ifid = generate_base("ifid", "IFID");
`$ifid->instantiate()`(.pcplus4(pcplus4_s1), .instr(instr_s1), .opcplus4(pcplus4_s2), oinstr(instr_s2));

// Instantiations

//;  my $ctl = generate_base( "ctl" , "CPU_CTL");
`$ctl->instantiate()`(.op(op), .func(fn), .mfunc(mfn), .beq(beq), .bne(bne), .bgtz(bgtz), .aluop(aluop), .aluimm(aluimm), .memrden(memRdEn), .memwren(memWrEn), .memtoreg(memtoreg), .regdst(regdst), .regwren(regWrEn), .alusrc(alusrc), .srcrden0(srcRdEn0), .srcrden1(srcRdEn1), .jmpreg(jmpreg), .jmp(jmp));

//; my $aluctl = generate_base("aluctl", "ALU_CTL");
`$aluctl->instantiate()`(.func(muxfunc), .aluop(aluop), .aluctl(aluctl));

//; my $alu = generate_base("alu", "ALU");
`$alu->instantiate()`(.clk, .rst, .ctl(aluctl), .a(alu_a), .b(alu_b), .shmt(shmt), .out(alu_o), .gtz(gtz), .zero(zero));
endmodule: `mname`
