// aluctl.vp
//; my $bW = parameter( name=>"bitWidth", val=>32, doc=>"Width of input");
module `mname`(
		input  logic [5:0] func,
		input  logic [1:0] aluop,
		output logic [3:0] aluctl);

	logic [3:0] alufnc;

	always_comb begin
		unique case(func[5:0])
			6'h03:   alufnc  = 4'd14; 	/* sra */
			6'h10:   alufnc  = 4'd10; 	/* mfhi */
			6'h12:   alufnc  = 4'd11; 	/* mflo */
			6'h1A:   alufnc  = 4'd3; 	/* div */
			6'h20:   alufnc  = 4'd2; 	/* add */
			6'h22:   alufnc  = 4'd6; 	/* sub */
			6'h24:   alufnc  = 4'd0; 	/* and */
			6'h25:   alufnc  = 4'd1; 	/* or */
			6'h26:   alufnc  = 4'd13;	/* xor */
			6'h27:   alufnc  = 4'd12;	/* nor */
			6'h2A:   alufnc  = 4'd7; 	/* slt */
			default: alufnc  = 4'd15;
		endcase
	end

	always_comb begin
		unique case(aluop)
			2'b00:   aluctl = 4'h2;   /* add for lw and sw*/
			2'b01:   aluctl = 4'h6;	  /* sub for branch instrs*/
			2'b10:   aluctl = alufnc; /* capture func fields*/
			default: aluctl = 4'hF;
		endcase
	end

endmodule : `mname`
