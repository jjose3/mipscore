// alu.vp
module `mname` (
		input  logic clk,
		input  logic rst,
		input  logic [4:0]  ctl,
		input  logic [31:0] a, b,
		input  logic [4:0]  shmt,
		output logic [31:0] out,
		output logic 	    gtz,
		output logic 	    zero);

	logic [31:0] sub_ab;
	logic [31:0] add_ab;
	logic [31:0] HI;
	logic [31:0] HInxt;
	logic [31:0] LO;
	logic [31:0] LOnxt;
	logic signed [31:0] quo;
	logic signed [31:0] rem;
	logic signed [63:0] mult;
	logic regen;
	logic 		oflow_add;
	logic 		oflow_sub;
	logic 		oflow;
	logic 		slt;
	logic [31:0]	tmp;

	assign gtz  = a[31] ? 1'b0 : (|a[31:0]);
	assign zero = (out == 32'd0); 

	assign sub_ab = a - b;
	assign add_ab = a + b;

	// overflow occurs (with 2s complement numbers) when
	// the operands have the same sign, but the sign of the result is
	// different.  The actual sign is the opposite of the result.
	// It is also dependent on whether addition or subtraction is performed.
	assign oflow_add = (a[31] == b[31] && add_ab[31] != a[31]) ? 1'b1 : 1'b0;
	assign oflow_sub = (a[31] == b[31] && sub_ab[31] != a[31]) ? 1'b1 : 1'b0;

	assign oflow = (ctl == 5'b0010) ? oflow_add : oflow_sub;

	// set if less than, 2s compliment 32-bit numbers
	assign slt = oflow_sub ? ~(a[31]) : a[31];

	always_comb begin
		out = 32'd0; rem = 32'd0; quo = 32'd0; HInxt = 32'd0; LOnxt = 32'd0; mult = 64'd0; tmp = 32'd0; 
		case (ctl)
			5'd0:  		out = a & b;				/* and */
			5'd1:  		out = a | b;				/* or */
			5'd2:  		out = add_ab;				/* add */
			5'd3:  		begin rem = $signed(a)%$signed(b); quo = $signed(a)/$signed(b); out = 32'd0;	/* div */
					      HInxt = $unsigned(rem); LOnxt = $unsigned(quo); end
			5'd4:		begin mult = $signed(a)*$signed(b); HInxt = $unsigned(mult[63:32]); LOnxt = $unsigned(mult[31:0]); out = 32'd0; end	/* mult */
			5'd5:		out = b << shmt;			/* sll */
			5'd6:  		out = sub_ab;				/* sub */
			5'd7:  		out = {{31{1'b0}}, slt};		/* slt */
			5'd8: 		begin HInxt = a; out = 32'd0; end		/* mthi */
			5'd9: 		begin LOnxt = a; out = 32'd0; end   	/* mtlo */
			5'd10: 		out = HI;				/* mfhi */
			5'd11: 		out = LO;				/* mflo */
			5'd12: 		out = ~(a | b);				/* nor */
			5'd13: 		out = a ^ b;				/* xor */
			5'd14: 		begin tmp = b >> shmt; out = ({32{b[31]}} << (32-shmt)) + tmp; end			/* sra */
			5'd16:		out = b << a[4:0];			/* sllv */
			5'd17:		out = b >> shmt;			/* srl */
			5'd18:		out = b >> a[4:0];			/* srlv */
			5'd19: 		begin tmp = b >> a[4:0]; out = ({32{b[31]}} << (32-a[4:0])) + tmp; end			/* srav */
		endcase
	end

assign regen = (ctl == 5'd3 || ctl == 5'd4 || ctl == 5'd8 || ctl == 5'd9);
//; for( my $i = 0 ; $i < 32 ; $i++ ){
//;  my $dff = generate_base( "dffen" , "D_FLIP_FLOP_HI".$i);
`$dff->instantiate()` ( .din(HInxt[`$i`]), .en(regen), .clk, .rst, .q(HI[`$i`]) );
//; }
//; for( my $i = 0 ; $i < 32 ; $i++ ){
//;  my $dff = generate_base( "dffen" , "D_FLIP_FLOP_LO".$i);
`$dff->instantiate()` ( .din(LOnxt[`$i`]), .en(regen), .clk, .rst, .q(LO[`$i`]) );
//; }

endmodule: `mname`
