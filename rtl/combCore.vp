// combCore.vp
//; my $bW = parameter( name=>"bitWidth", val=>32, doc=>"Width of input");
//; my $rA = parameter( name=>"rfAddressWidth", val=>5, max=>7 , doc=>"Bits for RF address" );
module `mname` (
input logic clk,
input logic rst,
input logic [`$bW-1`:0] instr,
input logic [`$bW-1`:0] pc,
input logic [`$bW-1`:0] src0,
input logic [`$bW-1`:0] src1,
input logic [`$bW-1`:0] memRdData,
output logic [`$bW-1`:0] memRdAddr,
output logic memRdEn,
output logic [`$bW-1`:0] memWrData ,
output logic [`$bW-1`:0] memWrAddr,
output logic memWrEn ,
output logic regWrEn,
output logic [`$rA-1`:0] regWrAddr,
output logic [`$rA-1`:0] srcAddr0 ,
output logic srcRdEn0 ,
output logic [`$rA-1`:0] srcAddr1 ,
output logic srcRdEn1 ,
output logic [`$bW-1`:0] dst0,
output logic [`$bW-1`:0] pcNxt
);

logic [5:0] op; //opcode 
logic [4:0] rs; //register s r-type
logic [4:0] rt; // register t r-type
logic [4:0] rd; // register d r-type
logic [4:0] shmt; //shift amount r-type
logic [5:0] fn; //function - r-type
logic [5:0] mfn; //function created for I-type
logic [5:0] muxfunc; //muxed function
logic [`$bW-1`:0] simm; //sign ext immediate for i-type
logic [25:0] offs; //offset for j-type

logic [`$bW-1`:0] pcplus4;
logic [`$bW-1`:0] pcplus8;
logic [`$bW-1`:0] pcplusimm;
logic [`$bW-1`:0] jmpaddr;
logic [`$bW-1`:0] alu_o, alu_a, alu_b;

logic [`$bW-1`:0] memRdByteWord, memRdByte, memrddata, memwrdata, memWrByte, memWrBytelow, memWrBytehi, regwrdata;
logic lwl, swl, lwr, swr, link;

logic [4:0] aluctl;  
logic [1:0] aluop;  
logic bne, bgtz, beq, bgez, blez, bltz, zero, gtz, gez, branch, jmp, jmpreg, alusrc, aluimm, memtoreg, regdst, bytemem, wordmem; 

assign op = instr[31:26];
assign rs = instr[25:21];
assign rt = instr[20:16];
assign rd = instr[15:11];
assign shmt = instr[10:6];
assign fn = instr[5:0];
assign simm = {{16{instr[15]}}, instr[15:0]};
assign offs = instr[25:0];

assign srcAddr0 = rs;
assign srcAddr1 = rt;

assign pcplus4 = pc + `$bW`'d4;
assign pcplus8 = pc + `$bW`'d8;
assign pcplusimm = pcplus4 + {simm[`$bW-3`:0], 2'b0};
assign jmpaddr = {pcplus4[31:28], offs[25:0], 2'b0};

assign branch = (bgtz && gtz) || (bne && ~zero) || (beq && zero) || (bgez && gez) || (blez && ~gtz) || (bltz && ~gez);

always_comb begin
	unique case({jmp, jmpreg, branch})
		3'b001:	   pcNxt = pcplusimm;
		3'b010:    pcNxt = src0;
		3'b100:    pcNxt = jmpaddr; 
		default:   pcNxt = pcplus4;
	endcase
end

assign alu_b = alusrc ? simm : src1;
assign alu_a = src0;
assign muxfunc = aluimm ? mfn : fn;

assign memWrAddr = alu_o;
assign memRdAddr = {alu_o[31:2],2'b00};
assign memWrData = (swl || swr) ? memwrdata : (bytemem||wordmem) ? memWrByte : src1;

assign link = (jmp || jmpreg || bgez || bltz) && regWrEn;

assign dst0 = (lwl || lwr) ? regwrdata : link ? pcplus8 : (memtoreg ? memRdByteWord : alu_o);
assign regWrAddr = link ? 5'b11111 : (regdst ? rd : rt);

assign memRdByteWord = (bytemem || wordmem) ? memRdByte : memRdData;

always_comb begin
	case({bytemem,alu_o[1:0]})
		3'b100: memRdByte = {{24{memRdData[7]}}, memRdData[7:0]};
		3'b101: memRdByte = {{24{memRdData[15]}}, memRdData[15:8]};
		3'b110: memRdByte = {{24{memRdData[23]}}, memRdData[23:16]};
		3'b111: memRdByte = {{24{memRdData[31]}}, memRdData[31:24]};
		3'b000: memRdByte = {{16{memRdData[15]}}, memRdData[15:0]};
		3'b010: memRdByte = {{16{memRdData[31]}}, memRdData[31:16]};
	endcase
end

assign memrddata = memRdData;
always_comb begin
	case({bytemem, alu_o[1:0]})
		3'b100: memWrByte = {memrddata[31:8], src1[7:0]}; 
		3'b101: memWrByte = {memrddata[31:16], src1[7:0], memrddata[7:0]};
		3'b110: memWrByte = {memrddata[31:24], src1[7:0], memrddata[15:0]};
		3'b111: memWrByte = {src1[7:0], memrddata[23:0]};
		3'b000: memWrByte = {memrddata[31:16], src1[15:0]};
		3'b010: memWrByte = {src1[15:0], memrddata[15:0]};
	endcase
end

always_comb begin
	case({lwl,alu_o[1:0]})
		3'b000: regwrdata = {memRdData[31:24],memRdData[23:16],memRdData[15:8],memRdData[7:0]};
		3'b001: regwrdata = {src1[31:24],memRdData[31:24],memRdData[23:16],memRdData[15:8]};
		3'b010: regwrdata = {src1[31:16],memRdData[31:24],memRdData[23:16]};
		3'b011: regwrdata = {src1[31:8],memRdData[31:24]};
		3'b100: regwrdata = {memRdData[7:0],src1[23:0]};
		3'b101: regwrdata = {memRdData[15:8],memRdData[7:0],src1[15:0]};
		3'b110: regwrdata = {memRdData[23:16],memRdData[15:8], memRdData[7:0],src1[7:0]};
		3'b111: regwrdata = {memRdData[31:24], memRdData[23:16],memRdData[15:8], memRdData[7:0]};
	endcase
end

always_comb begin
	case({swl,alu_o[1:0]})
		3'b000: memwrdata = {src1[31:0]};
		3'b001: memwrdata = {src1[23:0],memRdData[7:0]};
		3'b010: memwrdata = {src1[15:0],memRdData[15:0]};
		3'b011: memwrdata = {src1[7:0],memRdData[23:0]};
		3'b100: memwrdata = {memRdData[31:8],src1[31:24]};
		3'b101: memwrdata = {memRdData[31:16],src1[31:16]};
		3'b110: memwrdata = {memRdData[31:24],src1[31:8]};
		3'b111: memwrdata = {src1[31:0]};
	endcase
end

// Instantiations

//;  my $ctl = generate_base( "ctl" , "CPU_CTL");
`$ctl->instantiate()`(.op(op), .func(fn), .rt({rt[5],rt[0]}), .mfunc(mfn), .beq(beq), .bne(bne), .bgtz(bgtz), .bgez(bgez), .blez(blez), .bltz(bltz), .aluop(aluop), .lwl(lwl), .lwr(lwr), .aluimm(aluimm), .memrden(memRdEn), .memwren(memWrEn), .memtoreg(memtoreg), .regdst(regdst), .regwren(regWrEn), .alusrc(alusrc), .srcrden0(srcRdEn0), .srcrden1(srcRdEn1), .bytemem(bytemem), .wordmem(wordmem), .lwl(lwl), .swl(swl), .lwr(lwr), .swr(swr), .jmpreg(jmpreg), .jmp(jmp));

//; my $aluctl = generate_base("aluctl", "ALU_CTL");
`$aluctl->instantiate()`(.func(muxfunc), .aluop(aluop), .aluctl(aluctl));

//; my $alu = generate_base("alu", "ALU");
`$alu->instantiate()`(.clk, .rst, .ctl(aluctl), .a(alu_a), .b(alu_b), .shmt(shmt), .out(alu_o), .gtz(gtz), .gez(gez), .zero(zero));
endmodule: `mname`
