// aluctl.vp
//; my $bW = parameter( name=>"bitWidth", val=>32, doc=>"Width of input");
module `mname`(
		input  logic [5:0] func,
		input  logic [1:0] aluop,
		output logic [4:0] aluctl);

	logic [3:0] alufnc;

	always_comb begin
		unique case(func[5:0])
			6'h0 :	 alufnc  = 5'd5;	/* sll */
			6'h02:   alufnc  = 5'd17; 	/* srl */
			6'h03:   alufnc  = 5'd14; 	/* sra */
			6'h04:	 alufnc  = 5'd16;	/* sllv */
			6'h06:	 alufnc  = 5'd18;	/* srlv */
			6'h07:	 alufnc  = 5'd19;	/* srav */
			6'h10:   alufnc  = 5'd10; 	/* mfhi */
			6'h11:   alufnc  = 5'd8; 	/* mthi */
			6'h12:   alufnc  = 5'd11; 	/* mflo */
			6'h13:   alufnc  = 5'd9; 	/* mtlo */
			6'h18:   alufnc  = 5'd4; 	/* mult */
			6'h1A:   alufnc  = 5'd3; 	/* div */
			6'h20, 6'h21:   alufnc  = 5'd2; 	/* add */
			6'h22:   alufnc  = 5'd6; 	/* sub */
			6'h24:   alufnc  = 5'd0; 	/* and */
			6'h25:   alufnc  = 5'd1; 	/* or */
			6'h26:   alufnc  = 5'd13;	/* xor */
			6'h27:   alufnc  = 5'd12;	/* nor */
			6'h2A:   alufnc  = 5'd7; 	/* slt */
			default: alufnc  = 5'd15;
		endcase
	end

	always_comb begin
		unique case(aluop)
			2'b00:   aluctl = 5'd2;   /* add for lw and sw*/
			2'b01:   aluctl = 5'd6;	  /* sub for branch instrs*/
			2'b10:   aluctl = alufnc; /* capture func fields*/
			default: aluctl = 5'd15;
		endcase
	end

endmodule : `mname`
