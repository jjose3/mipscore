//top_mipsCore.vp


module `mname` ();



//; my $wl = parameter( name=>"wordLength", val=>32, doc=>"Width of input" );
//; my $iW = parameter( name=>"issueWidth", val=>1, doc=>"Number of fetched instructions" );
//; my $rP = parameter( name=>"rfReadPorts", val=>2, doc=>"Number of RF read ports" );
//; my $wP = parameter( name=>"rfWritePorts", val=>1, doc=>"Number of RF write ports" );
//; my $rC = parameter( name=>"rfEntryCount", val=>32, max=>128, doc=>"Number of RF addresses");
//; my $rA = parameter( name=>"rfAddressWidth", val=>5, max=>7 , doc=>"Bits for RF address" );
//; my $btb = parameter( name=>"enableBTB", val=>0, list=>[0,1], doc=>"Enable BTB");
//; my $btbW = parameter( name=>"entrySizeBTB", val=>34, max=>36, doc=>"BTB entry size");
//; my $btbC = parameter( name=>"entryCountBTB", val=>0, max=>256, doc=>"BTB entries");
//; my $mD = parameter( name=>"MipsMode", val=>"Cyc1", list=>["Cyc1","Cyc5","Smpl5","Fwd5","Dual"], doc=>"Iterative design state, testbench will ignore" );


//; my $dut = generate_base("mipsCore", "my_mipsCore");
//; my $dc = generate_base("dcache", "my_dcache");
//; my $ic = generate_base("icache", "my_icache");
//; my $rf = generate_base("rf", "my_rf");
//; my $gb = generate("generic_bench", "BASIC_BENCH");
//; my $pc = generate("cycle_counter", "PERF_COUNT", CycleName=>"multRate_cyc");
//; my $ec = generate("cycle_counter", "ERROR_COUNT", CountName=>"mult_err_cnt");

    logic 			  perf ; 

    logic             triggerStart;
    logic             triggerStop;
    int               seed;
    int               clk_period ;

	logic [`$iW*$wl-1`:0] iCacheReadData;
	logic [`$wl-1`:0] iCacheReadAddr;
	logic [`$wl-1`:0] dCacheReadData;
	logic [`$wl-1`:0] dCacheWriteData;
	logic [`$wl-1`:0] dCacheAddr;
	logic dCacheWriteEn;
	logic dCacheReadEn;
	//; for( my $i = 0 ; $i < $rP ; $i++ ){
	logic [`$wl-1`:0] rfReadData_p`$i`;
	logic [`$rA-1`:0] rfReadAddr_p`$i`;
	logic rfReadEn_p`$i`;
	//; }
	//; for( my $i = 0 ; $i < $wP ; $i++ ){
	logic [`$wl-1`:0] rfWriteData_p`$i`;
	logic [`$rA-1`:0] rfWriteAddr_p`$i`;
	logic rfWriteEn_p`$i`;
	//; }
	//; if( $btb ){
	logic [`$btbW-1`:0] btbReadData;
	logic [`$btbW-1`:0] btbWriteData;
	logic [`$wl-1`:0] btbWriteAddr;
	logic [`$wl-1`:0] btbReadAddr;
	logic btbWriteEn;
	logic btbReadEn;
	//; }
	logic clk;
	logic rst;
	logic taskstop;


    // Instantiate the design under test and basic bench
    `$dut->instantiate()` (.*);
    `$dc->instantiate()` (.*);
    `$ic->instantiate()` (.*);
    `$rf->instantiate()` (.*);
    `$gb->instantiate()`  (.*);
    //;#`$pc->instantiate()`  (.triggerStart(perf), .triggerStop(triggerStop), .increment(instr_vld), .clk(clk), .rst(rst) );
    //;#`$ec->instantiate()`  (.triggerStart(triggerStart), .triggerStop(triggerStop), .increment(instr_err), .clk(clk), .rst(rst) );

    string testname;
    initial begin
	if ( $test$plusargs("TESTNAME") ) begin
		$value$plusargs("TESTNAME=%s", testname);
		$display("Using Testname = %s", testname);
		if(testname == "MOA") testcase_moa();
		else if(testname == "SSM") testcase_ssm();
		else if(testname == "LFS") testcase_lfs();
		else if(testname == "SCP") testcase_scp();
		else if(testname == "MOI") testcase_moi();
		else $fatal("FATAL ERROR - TESTNAME not found");
        end else begin
            $fatal("FATAL ERROR - TESTNAME not provided") ;
        end
    end
    // Simulation Narrative
    initial begin
    	triggerStart  = 1'b0 ;
    	triggerStop = 1'b0 ;
	perf = 1'b0;
    	repeat(10) @(posedge clk );
    	triggerStart  = 1'b1 ;
    	perf = 1'b1 ;
	@(taskstop);
    	triggerStop = 1'b1 ;
	#100;
    	$finish();
    end
	
//; include("verif/tasks.vph");
endmodule
