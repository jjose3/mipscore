//top_combCore.vp


module `mname` ();

//; my $dut = generate_base("combCore", "my_combCore");
//; my $bW = $dut->get_param("bitWidth");

    logic signed [`$bW-1`:0] instr, pc, src0, src1, memRdData, memRdAddr, memWrData , memWrAddr , dst0, pcNxt;
    logic             memRdEn, memWrEn;
    logic [5:0] op; //opcode 
    logic [4:0] rs; //register s r-type
    logic [4:0] rt; // register t r-type
    logic [4:0] rd; // register d r-type
    logic [4:0] shmt; //shift amount r-type
    logic [5:0] fn; //function - r-type
    logic signed [15:0] imm; //immediate for i-type
    logic signed [31:0] simm; //immediate for i-type
    logic signed [25:0] offs; //offset for j-type


    // Instantiate the design under test and basic bench
    `$dut->instantiate()` (.*);

	initial begin
        // if this is a "+wave" run, it must record all signals
        if ( $test$plusargs("wave") ) begin
            $display("%t: Starting Wave Capture",$time);
            //         levels  instance
            $vcdpluson(0,       my_combCore );
            $vcdplusmemon(0,    my_combCore);
        end
	end


    // Simulation Narrative
    initial begin
	#10;

	for (int i=0; i<100; i++) begin
	op = 6'd0; rs = 5'd0; rt = 5'd0; rd = 5'd0; shmt = 5'd0; fn = 6'd0; imm = 16'd0; offs = 26'd0;  // Do Nothing
	instr = {op, rs, rt, rd, shmt, fn}; pc = `$bW`'h0; src0 = `$bW`'h0; src1 = `$bW`'h0; memRdData = `$bW`'h0;
	#2;
	check("NOTHING", instr, memRdAddr, `$bW`'h0, memWrData , `$bW`'h0, memWrAddr, `$bW`'h0, dst0, `$bW`'h0, pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b0; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100000; imm = 16'h0; offs = 26'h0; // Add instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("ADD", instr, memRdAddr, src0+src1, memWrData , src1, memWrAddr, src0+src1, dst0, src0+src1, pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b0; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100100; imm = 16'h0; offs = 26'h0; // and instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("AND", instr, memRdAddr, src0&src1, memWrData , src1, memWrAddr, src0&src1, dst0, src0&src1, pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b0; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100111; imm = 16'h0; offs = 26'h0; // nor instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("NOR", instr, memRdAddr, ~(src0|src1), memWrData , src1, memWrAddr, ~(src0|src1), dst0, ~(src0|src1), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b0; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100101; imm = 16'h0; offs = 26'h0; // or instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("OR", instr, memRdAddr, (src0|src1), memWrData , src1, memWrAddr, (src0|src1), dst0, (src0|src1), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b0; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b101010; imm = 16'h0; offs = 26'h0; // slt instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("SLT", instr, memRdAddr, (src0 < src1), memWrData , src1, memWrAddr, (src0 < src1), dst0, (src0 < src1), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;
	
	op = 6'b0; rs = 5'b0; rt = $random(); rd = $random(); shmt = $random(); fn = 6'b000011; imm = 16'h0; offs = 26'h0; // sra instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	//$display("shift amount = %h", shmt);
	#2;
	check("SRA", instr, memRdAddr, (src1 >>> shmt), memWrData , src1, memWrAddr, (src1 >>> shmt), dst0, (src1 >>> shmt), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b0; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100010; imm = 16'h0; offs = 26'h0; // sub instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("SUB", instr, memRdAddr, src0-src1, memWrData , src1, memWrAddr, src0-src1, dst0, src0-src1, pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b0; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100110; imm = 16'h0; offs = 26'h0; // xor instruction
	instr = {op, rs, rt, rd, shmt, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("XOR", instr, memRdAddr, (src0^src1), memWrData , src1, memWrAddr, (src0^src1), dst0, (src0^src1), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b001000; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100110; imm = $random(); offs = 26'h0; // addi instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]};
	#2;
	check("ADDI", instr, memRdAddr, (src0+simm), memWrData , src1, memWrAddr, (src0+simm), dst0, (src0+simm), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b001100; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100110; imm = $random(); offs = 26'h0; // andi instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]};
	#2;
	check("ANDI", instr, memRdAddr, (src0&simm), memWrData , src1, memWrAddr, (src0&simm), dst0, (src0&simm), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b001101; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100110; imm = $random(); offs = 26'h0; // ori instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]};
	#2;
	check("ORI", instr, memRdAddr, (src0|simm), memWrData , src1, memWrAddr, (src0|simm), dst0, (src0|simm), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b001010; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100110; imm = $random(); offs = 26'h0; // slti instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]};
	#2;
	check("SLTI", instr, memRdAddr, (src0 < simm), memWrData , src1, memWrAddr, (src0 < simm), dst0, (src0 < simm), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b001110; rs = $random(); rt = $random(); rd = $random(); shmt = 5'b0; fn = 6'b100110; imm = $random(); offs = 26'h0; // xori instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]};
	#2;
	check("XORI", instr, memRdAddr, (src0 ^ simm), memWrData , src1, memWrAddr, (src0 ^ simm), dst0, (src0 ^ simm), pcNxt, pc+4 , memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b000100; rs = $random(); rt = $random(); rd = $random(); shmt = $random(); fn = $random(); imm = $random(); offs = $random(); // beq instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]} * 4;
	#2;
	check("BEQ", instr, memRdAddr, (src0-src1), memWrData , src1, memWrAddr, (src0-src1), dst0, (src0-src1), pcNxt, (src0==src1)?pc+4+simm:pc+4, memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b000111; rs = $random(); rt = $random(); rd = $random(); shmt = $random(); fn = $random(); imm = $random(); offs = $random(); // bgtz instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]} * 4;
	#2;
	check("BGTZ", instr, memRdAddr, (src0-src1), memWrData , src1, memWrAddr, (src0-src1), dst0, (src0-src1), pcNxt, (src0>0)?pc+4+simm:pc+4, memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b000101; rs = $random(); rt = $random(); rd = $random(); shmt = $random(); fn = $random(); imm = $random(); offs = $random(); // bne instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]} * 4;
	#2;
	check("BNE", instr, memRdAddr, (src0-src1), memWrData , src1, memWrAddr, (src0-src1), dst0, (src0-src1), pcNxt, (src0!=src1)?pc+4+simm:pc+4, memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b100011; rs = $random(); rt = $random(); rd = $random(); shmt = $random(); fn = $random(); imm = $random(); offs = $random(); // lw instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]};
	#2;
	check("LW", instr, memRdAddr, (src0+simm), memWrData , src1, memWrAddr, (src0+simm), dst0, memRdData, pcNxt, pc+4, memRdEn, 1, memWrEn, 0);
	#10;

	op = 6'b101011; rs = $random(); rt = $random(); rd = $random(); shmt = $random(); fn = $random(); imm = $random(); offs = $random(); // sw instruction
	instr = {op, rs, rt, imm}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	simm = {{16{imm[15]}},imm[15:0]};
	#2;
	check("SW", instr, memRdAddr, (src0+simm), memWrData , src1, memWrAddr, (src0+simm), dst0, (src0+simm), pcNxt, pc+4, memRdEn, 0, memWrEn, 1);
	#10;

	op = 6'b000010; rs = $random(); rt = $random(); rd = $random(); shmt = $random(); fn = $random(); imm = $random(); offs = $random(); // j instruction
	instr = {op, offs}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("J", instr, memRdAddr, memRdAddr, memWrData , src1, memWrAddr, memWrAddr, dst0, dst0, pcNxt, {pc[31:28],offs,2'b0}, memRdEn, 0, memWrEn, 0);
	#10;

	op = 6'b000000; rs = $random(); rt = $random(); rd = $random(); shmt = $random(); fn = 6'b001000; imm = $random(); offs = $random(); // jr instruction
	instr = {op, rs, 15'b0, fn}; pc = $random(); src0 = $random(); src1 = $random(); memRdData = $random();
	#2;
	check("JR", instr, memRdAddr, memRdAddr, memWrData , src1, memWrAddr, memWrAddr, dst0, dst0, pcNxt, src0, memRdEn, 0, memWrEn, 0);
	#10;
	
	end

    	$finish();
    end

function check;
input string inst;
input [`$bW-1`:0] instr, memRdAddr, omemRdAddr, memWrData , omemWrData , memWrAddr, omemWrAddr, dst0, odst0, pcNxt, opcNxt;
input memRdEn, omemRdEn, memWrEn, omemWrEn;
$display("Performing instruction %s %h", inst, instr);
assert(memRdAddr == omemRdAddr) else $display("%t: Error - %s `$bW`'h%h %b != %b", $time(), inst, instr, memRdAddr, omemRdAddr);
assert(memWrData == omemWrData) else $display("%t: Error - %s `$bW`'h%h %b != %b", $time(), inst, instr, memWrData , omemWrData);
assert(memWrAddr == omemWrAddr) else $display("%t: Error - %s `$bW`'h%h %b != %b", $time(), inst, instr, memWrAddr, omemWrAddr);
assert(dst0 == odst0) else $display("%t: Error - %s `$bW`'h%h %b != %b", $time(), inst, instr, dst0, odst0);
assert(pcNxt == opcNxt) else $display("%t: Error - %s `$bW`'h%h %b != %b", $time(), inst, instr,  pcNxt, opcNxt);
assert(memRdEn == omemRdEn) else $display("%t: Error - %s `$bW`'h%h %b != %b", $time(), inst,instr,  memRdEn, omemRdEn);
assert(memWrEn == omemWrEn) else $display("%t: Error - %s `$bW`'h%h %b != %b", $time(), inst,instr,  memWrEn, omemWrEn);
endfunction

endmodule 
